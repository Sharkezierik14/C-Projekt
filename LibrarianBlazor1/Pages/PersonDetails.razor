@page "/person/{id:int}"
@using Contracts
@using Services
@inject IPersonServices PersonServices
@inject IRentalServices RentalService
@inject NavigationManager NavigationManager
@if (Members is null)
{
    <p>Loading...</p>
}else
{  
    <h3>@Members.Name's details</h3>
    <EditForm Model="@Members" OnValidSubmit="@HandleValidSubmitAsync">
        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText @bind-Value="@Members.Name" class=" form-control"></InputText>
        </div>
        <div class="mb-3">
            <label class="form-label">Address</label>
            <InputText @bind-Value="@Members.Address" class=" form-control"></InputText>
        </div>
        <div class="mb-3">
            <label class="form-label">YearOfBirth</label>
            <InputNumber @bind-Value="@Members.YearOfBirth" class=" form-control"></InputNumber>
        </div>
        @if (rentals.Any())
        {
               <h3>Kikölcsönzött könyvek</h3>

            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>TitleOfBook</th>
                        <th>DateOfRental</th>
                        <th>ReturnDate</th>
                    </tr>
                </thead>
            @foreach (var rental in rentals)
            {   
                @if (Members.Id == rental.MemberId){ 
                       <tbody>
                            <tr>
                                <td>@rental.Book.Title</td>
                                <td>@rental.DateOfRental.ToShortDateString()</td>
                                @if (rental.ReturnDate < DateTime.Now)
                                {
                                    <td  style="background-color: red">@rental.ReturnDate.ToShortDateString()</td>
                                }
                                else
                                {
                                    <td>@rental.ReturnDate.ToShortDateString()</td>
                                }
                            </tr>
                       </tbody>
                }
            
            }
            </table>
        }
        <button type="submit" class="btn btn-primary form-control">Edit</button>
        <br>
    </EditForm>
    <button @onclick ="@HandleDeleteAsync" class="btn btn-danger form-control">Delete</button>
}
@code {
    [Parameter]
    public int Id { get; set; }

    private Member? Members { get; set; }
    private IEnumerable<Rental>? rentals { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Members = await PersonServices.GetPersonByIdAsync(Id);
        rentals = await RentalService.GetAllRentalAsync();
    }

    private async Task HandleValidSubmitAsync()
    {
        await PersonServices.UpdatePersonAsync(Id, Members!);
        NavigationManager.NavigateTo("/");
    }
    private async Task HandleDeleteAsync()
    {
        await PersonServices.DeletePersonAsync(Id);
        NavigationManager.NavigateTo("/");
    }
}
